{"version":3,"sources":["gameplay.js","splitpane.js","square.js","board.js","historysidebar.js","controls.js","game.js","index.js"],"names":["PLAYERS","ai","human","PLAY_MODE","SEARCH_MODE","max","min","AIPlayer","squares","minimax","state","mode","isTerminal","move","util","utility","bestChoice","map","square","idx","filter","v","forEach","playerId","nextState","player","resultState","slice","transition","moveUtil","foundBetterChoice","result","checkWinner","speedBonus","length","winner","includes","sol","a","b","c","line","Splitpane","props","className","left","right","Square","optStyles","previewStyle","win","id","onClick","value","Board","i","key","this","winningLine","rows","children","j","push","renderSquare","Component","HistorySidebar","history","reversed","reverse","prevState","moveNo","jumpIdx","Toggle","sortRecent","Restart","PlayMode","onChange","Game","Array","fill","playerIsX","stepNum","playMode","doAIMove","setState","document","querySelectorAll","s","querySelector","step","event","newGame","target","status","current","jumpTo","handleClick","handleToggle","handleRestart","e","handleModeChange","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b73fea07.chunk.js","sourcesContent":["/**\n * Minimax search conventions\n * - Start with MAX player\n * - Utilities: win = 1, draw = 0, lose = -1\n * - State: array of squares (array of strings)\n * - Move: indicies of square array (number)\n*  - Transition model will slice whenever possible for immutability\n */\n\nconst PLAYERS = { ai: 'O', human: 'X' };\nconst PLAY_MODE = { ai: 'ai', human: 'human' };\nconst SEARCH_MODE = { max: 'MAX', min: 'MIN' };\n\nconst AIPlayer = {\n  search: (squares) => minimax(squares, SEARCH_MODE.max),\n};\n\n// note: returns util of player MAX\nfunction utility(state) {\n  const result = checkWinner(state);\n  const speedBonus = state.filter(v => v == null).length;\n  \n  let score = 0;\n  if ( result === null ) score = 1; // if terminal => draw\n  else if ( result.winner === PLAYERS.ai ) score = 1;\n  else score = -1;\n\n  return score * (1 + speedBonus);\n}  \n\nfunction isTerminal(state) {\n  return !state.includes(null) || checkWinner(state);\n}\n\nfunction transition(state, move, player) {\n  const resultState = state.slice();\n  resultState[move] = player;\n  return resultState;\n}\n\nfunction minimax(state, mode) {\n  if ( isTerminal(state) ) {\n    return {\n      move: null,\n      util: utility(state)\n    };\n  }\n  \n  let bestChoice = { move: null, util: null };\n  const moves = state\n    .map((square, idx) => ( square == null ) ? idx : -1)\n    .filter(v => v !== -1);\n\n  moves.forEach(move => {\n    const playerId = mode === SEARCH_MODE.max ? PLAYERS.ai : PLAYERS.human;\n    const nextState = transition(state, move, playerId);\n    const moveUtil = mode === SEARCH_MODE.max ?\n      minimax(nextState, SEARCH_MODE.min).util\n      : minimax(nextState, SEARCH_MODE.max).util;\n\n    let foundBetterChoice = false;\n    if ( mode === SEARCH_MODE.max ) {\n      foundBetterChoice = bestChoice.util < moveUtil;\n    } else {\n      foundBetterChoice = bestChoice.util > moveUtil;\n    }\n\n    if ( bestChoice.util == null || foundBetterChoice ) {\n        bestChoice.util = moveUtil;\n        bestChoice.move = move;\n    }\n  });\n\n  return bestChoice;\n}\n\nfunction checkWinner(squares) {\n  const lines = [\n    [0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6],\n    [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6],\n  ];\n  for ( let sol of lines ) {\n    const [a, b, c] = sol;\n    if ( squares[a] && squares[a] === squares[b] && squares[a] === squares[c] ) {\n      return {\n        winner: squares[a],\n        line: [a, b, c],\n      };\n    }\n  }\n  return null;\n}\n\nexport { PLAY_MODE, isTerminal, checkWinner, AIPlayer }\n","import React from 'react';\n\nexport default function Splitpane(props) {\n  return (\n    <div className='pane-container'>\n      <div className='pane-left'>\n        {props.left}\n      </div>\n      <div className='pane-right'>\n        {props.right}\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\n\nexport default function Square(props) {\n  let optStyles = '';\n  optStyles += props.previewStyle ? props.previewStyle : '';\n  optStyles += props.win ? props.win : '';\n\n  return (\n    <button id={props.id}\n      className={`square ${optStyles}`}\n      onClick={() => props.onClick()}>\n      {props.value}\n    </button>\n  );\n}\n","import React, { Component } from 'react';\nimport Square from './square';\n\nexport default class Board extends Component {\n  // helper routine for rendering squares\n  // - pass state: `value`\n  // - pass \"accessor\" to modify parent `Board` state: `handleClick`\n  renderSquare(i) {\n    return (\n      <Square key={i} id={`sq-${i}`}\n        win={this.props.winningLine?.includes(i) ? 'win' : ''}\n        previewStyle={this.props.previewStyle}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    let rows = [];\n    \n    for ( let i = 0; i < 3; i += 1 ) {\n      let children = [];\n      for ( let j = i * 3; j < i * 3 + 3; j += 1 ) {\n        children.push(this.renderSquare(j));\n      }\n      rows.push(\n        <div key={i} className='board-row'>{children}</div>\n      );\n    }\n\n    return (\n      <div className='board'>\n        {rows}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Board from './board';\n\n// The sidebar handles jumping and rendering the histories\n//  in the proper order\n// - The jump function passed via props works only with the original indicies orders\nexport default function HistorySidebar(props) {\n  const history = props.reversed ?\n    props.history.reverse() : props.history;\n\n  return (\n    <ul className='sidebar'>\n      {\n        history.map((prevState, moveNo) => {\n          const jumpIdx = props.reversed ?\n            history.length - moveNo - 1 : moveNo;\n\n          return (\n            <li key={moveNo}>\n              <Board\n                previewStyle='preview'\n                squares={prevState.squares}\n                onClick={() => props.onClick(jumpIdx)}/>\n            </li>\n          );\n        })\n      }\n    </ul>\n  );\n}\n","import React from 'react';\nimport { PLAY_MODE } from './gameplay';\n\nexport function Toggle(props) {\n  return (\n    <button onClick={props.onClick}>\n      {props.sortRecent ? 'Most recent' : 'Chronological'}\n    </button>\n  )\n}\n\nexport function Restart(props) {\n  return (\n    <button onClick={props.onClick}>\n      Restart\n    </button>\n  )\n}\n\nexport function PlayMode(props) {\n  return (\n    <select value={props.value} onChange={props.onChange}>\n      <option value={PLAY_MODE.ai}>AI player</option>\n      <option value={PLAY_MODE.human}>Human player</option>\n    </select>\n  )\n}\n","import React, { Component } from 'react';\nimport {\n  PLAY_MODE, isTerminal, checkWinner, AIPlayer\n} from './gameplay';\nimport Splitpane from './splitpane';\nimport Board from './board';\nimport HistorySidebar from './historysidebar';\nimport { Toggle, Restart, PlayMode } from './controls'\n\n// TODO: write tests--this one tests a trap setup by X\n// const test = [\n//   'O', 'O', 'X', 'X', null, 'O', null, null, 'X'\n// ];\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      playerIsX: true,\n      stepNum: 0,\n      sortRecent: true,\n      winningLine: null,\n      playMode: PLAY_MODE.ai,\n    }\n  }\n\n  handleClick(idx) {\n    // take history only until the specified step\n    const history = this.state.history.slice(0, this.state.stepNum + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();  // shallow copy\n\n    // ignore click if square already clicked or game won\n    if ( squares[idx] || this.state.winningLine ) return;\n    \n    // do move by filling square\n    squares[idx] = this.state.playerIsX ? 'X' : 'O';\n    let line = checkWinner(squares)?.line;\n\n    // make AI moves if playing AI and game not won yet\n    if ( this.state.playMode === PLAY_MODE.ai && !line ) {\n      this.doAIMove(squares);\n      line = checkWinner(squares)?.line;\n    }\n    \n    // update state\n    this.setState({\n      history: [ ...history, { squares: squares } ],\n      playerIsX: this.state.playMode === PLAY_MODE.ai ?\n        true : !this.state.playerIsX,  // turn-taking\n      stepNum: history.length,\n      winningLine: line,\n    });\n  }\n\n  doAIMove(squares) {\n    // clear any existing main board styling\n    const elems = document.querySelectorAll(`.square:not(.preview)`);\n    elems.forEach(s => s.className = 'square');\n\n    const { move } = AIPlayer.search(squares);\n    if ( move == null ) return; // no best move (game ended in a draw?)\n    \n    // highlight recommended move\n    const sq = document.querySelector(`#sq-${move}:not(.preview)`);\n    sq.className += ' recommended';\n    \n    squares[move] = 'O';\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNum: step,\n      playerIsX: this.state.playMode === PLAY_MODE.ai ?\n        true : (step % 2) === 0,\n      winningLine: null,\n    })\n  }\n\n  handleToggle() {\n    this.setState({\n      sortRecent: !this.state.sortRecent\n    });\n  }\n\n  handleRestart() {\n    this.setState({\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNum: 0,\n      playerIsX: this.state.playMode === PLAY_MODE.ai ?\n        true : !this.state.playerIsX,\n      winningLine: null,\n    });\n  }\n\n  handleModeChange(event) {\n    let newGame = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNum: 0,\n      winningLine: null,\n      playMode: event.target.value,\n    };\n    if ( event.target.value === PLAY_MODE.ai )\n      newGame['playerIsX'] = true;\n\n    this.setState(newGame);\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNum];\n\n    let status;\n    if ( isTerminal(current.squares) ) {\n      const result = checkWinner(current.squares);\n      status = result ? `Winner: ${result.winner}` : 'Draw';\n    } else {\n      status = `Next player: ${this.state.playerIsX ? 'X' : 'O'}`;\n    }\n\n    return (\n      <Splitpane\n        left={\n          <HistorySidebar\n            history={history.slice(0, history.length - 1)}\n            reversed={this.state.sortRecent}\n            onClick={(i) => this.jumpTo(i)} />\n        }\n        right={\n          <main className='main'>\n            <div className='status'>{status}</div>\n            <Board\n              squares={current.squares}\n              winningLine={this.state.winningLine}\n              onClick={(i) => this.handleClick(i)} />\n            <Toggle\n              onClick={() => this.handleToggle()}\n              sortRecent={this.state.sortRecent} />\n            <Restart\n              onClick={() => this.handleRestart()} />\n            <PlayMode \n              value={this.state.playMode}\n              onChange={(e) => this.handleModeChange(e)} />\n          </main>\n        } />\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './game';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}