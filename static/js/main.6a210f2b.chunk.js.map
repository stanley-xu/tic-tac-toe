{"version":3,"sources":["gameplay.js","splitpane.js","square.js","board.js","historysidebar.js","controls.js","game.js","index.js"],"names":["SEARCH_MODE","max","min","AIPlayer","id","search","squares","minimax","state","mode","isTerminal","move","util","utility","bestChoice","map","square","idx","filter","v","forEach","playerId","nextState","player","resultState","slice","transition","moveUtil","foundBetterChoice","result","checkWinner","speedBonus","length","winner","includes","sol","a","b","c","line","Splitpane","props","className","left","right","Square","optStyles","previewStyle","win","onClick","value","Board","i","key","this","winningLine","rows","children","j","push","renderSquare","Component","HistorySidebar","history","reversed","reverse","prevState","moveNo","jumpIdx","Toggle","sortRecent","Restart","PlayMode","onChange","GAME_MODE","ai","human","Game","Array","fill","playerIsX","stepNum","playMode","setState","bestMove","document","querySelectorAll","s","querySelector","step","event","target","status","current","jumpTo","handleClick","handleToggle","handleRestart","e","handleChange","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.6a210f2b.chunk.js","sourcesContent":["/**\n * Minimax search conventions\n * - Start with MAX player\n * - Utilities: win = 1, draw = 0, lose = -1\n * - State: array of squares (array of strings)\n * - Move: indicies of square array (number)\n*  - Transition model will slice whenever possible for immutability\n */\n\nconst SEARCH_MODE = { max: 'MAX', min: 'MIN' };\n\nconst AIPlayer = {\n  id: 'O',  // assumption\n  search: (squares) => {\n    return minimax(squares, SEARCH_MODE.max);\n    // TODO\n  },\n};\n\n// note: returns util of player MAX\nfunction utility(state) {\n  const result = checkWinner(state);\n  const speedBonus = state.filter(v => v == null).length;\n  \n  let score = 0;\n  if ( result === null ) score = 1; // if terminal => draw\n  else if ( result.winner === AIPlayer.id ) score = 1;\n  else score = -1;\n\n  return score * speedBonus;\n}  \n\nfunction isTerminal(state) {\n  return !state.includes(null) || checkWinner(state);\n}\n\nfunction transition(state, move, player) {\n  const resultState = state.slice();\n  resultState[move] = player;\n  return resultState;\n}\n\nfunction minimax(state, mode) {\n  if ( isTerminal(state) ) {\n    return {\n      move: null,\n      util: utility(state)\n    };\n  }\n  \n  let bestChoice = { move: null, util: null };\n  const moves = state\n    .map((square, idx) => ( square == null ) ? idx : -1)\n    .filter(v => v !== -1);\n\n  moves.forEach(move => {\n    const playerId = mode === SEARCH_MODE.max ?\n      AIPlayer.id : 'X';\n    const nextState = transition(state, move, playerId);\n    const moveUtil = mode === SEARCH_MODE.max ?\n      minimax(nextState, SEARCH_MODE.min).util\n      : minimax(nextState, SEARCH_MODE.max).util;\n\n    let foundBetterChoice = false;\n    if ( mode === SEARCH_MODE.max ) {\n      foundBetterChoice = bestChoice.util < moveUtil;\n    } else {\n      foundBetterChoice = bestChoice.util > moveUtil;\n    }\n\n    if ( bestChoice.util == null || foundBetterChoice ) {\n        bestChoice.util = moveUtil;\n        bestChoice.move = move;\n    }\n  });\n\n  return bestChoice;\n}\n\nfunction checkWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for ( let sol of lines ) {\n    const [a, b, c] = sol;\n    if ( squares[a] && squares[a] === squares[b] && squares[a] === squares[c] ) {\n      return {\n        winner: squares[a],\n        line: [a, b, c],\n      };\n    }\n  }\n  return null;\n}\n\nexport { isTerminal, checkWinner, AIPlayer }\n","import React from 'react';\n\nexport default function Splitpane(props) {\n  return (\n    <div className='pane-container'>\n      <div className='pane-left'>\n        {props.left}\n      </div>\n      <div className='pane-right'>\n        {props.right}\n      </div>\n    </div>\n  )\n}\n","import React from 'react';\n\nexport default function Square(props) {\n  let optStyles = '';\n  optStyles += props.previewStyle ? props.previewStyle : '';\n  optStyles += props.win ? props.win : '';\n\n  return (\n    <button id={props.id}\n      className={`square ${optStyles}`}\n      onClick={() => props.onClick()}>\n      {props.value}\n    </button>\n  );\n}\n","import React, { Component } from 'react';\nimport Square from './square';\n\nexport default class Board extends Component {\n  // helper routine for rendering squares\n  // - pass state: `value`\n  // - pass \"accessor\" to modify parent `Board` state: `handleClick`\n  renderSquare(i) {\n    return (\n      <Square key={i} id={`sq-${i}`}\n        win={this.props.winningLine?.includes(i) ? 'win' : ''}\n        previewStyle={this.props.previewStyle}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    let rows = [];\n    \n    for ( let i = 0; i < 3; i += 1 ) {\n      let children = [];\n      for ( let j = i * 3; j < i * 3 + 3; j += 1 ) {\n        children.push(this.renderSquare(j));\n      }\n      rows.push(\n        <div key={i} className='board-row'>{children}</div>\n      );\n    }\n\n    return (\n      <div className='board'>\n        {rows}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Board from './board';\n\n// The sidebar handles jumping and rendering the histories\n//  in the proper order\n// - The jump function passed via props works only with the original indicies orders\nexport default function HistorySidebar(props) {\n  const history = props.reversed ?\n    props.history.reverse() : props.history;\n\n  return (\n    <ul className='sidebar'>\n      {\n        history.map((prevState, moveNo) => {\n          const jumpIdx = props.reversed ?\n            history.length - moveNo - 1 : moveNo;\n\n          return (\n            <li key={moveNo}>\n              <Board\n                previewStyle='preview'\n                squares={prevState.squares}\n                onClick={() => props.onClick(jumpIdx)}/>\n            </li>\n          );\n        })\n      }\n    </ul>\n  );\n}\n","import React from 'react';\nimport { GAME_MODE } from './game';\n\nexport function Toggle(props) {\n  return (\n    <button onClick={props.onClick}>\n      {props.sortRecent ? 'Most recent' : 'Chronological'}\n    </button>\n  )\n}\n\nexport function Restart(props) {\n  return (\n    <button onClick={props.onClick}>\n      Restart\n    </button>\n  )\n}\n\nexport function PlayMode(props) {\n  return (\n    <select value={props.value} onChange={props.onChange}>\n      <option value={GAME_MODE.ai}>AI player</option>\n      <option value={GAME_MODE.human}>Human player</option>\n    </select>\n  )\n}\n","import React, { Component } from 'react';\nimport { isTerminal, checkWinner, AIPlayer } from './gameplay';\nimport Splitpane from './splitpane';\nimport Board from './board';\nimport HistorySidebar from './historysidebar';\nimport { Toggle, Restart, PlayMode } from './controls'\n\nexport const GAME_MODE =  { ai: 'ai', human: 'human' };\n\nexport default class Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      playerIsX: true,\n      stepNum: 0,\n      sortRecent: true,\n      winningLine: null,\n      playMode: GAME_MODE.ai,\n    }\n  }\n\n  handleClick(idx) {\n    // take history only until the specified step\n    const history = this.state.history.slice(0, this.state.stepNum + 1);\n    \n    const current = history[history.length - 1];\n    const squares = current.squares.slice();  // shallow copy\n\n    // short circuit if winner was announced or square already filled\n    if ( squares[idx] || this.state.winningLine ) return;\n    \n    // do move by filling square\n    squares[idx] = this.state.playerIsX ? 'X' : 'O';\n    \n    // update\n    const line = checkWinner(squares)?.line;\n    this.setState({\n      history: [ ...history, { squares: squares } ],\n      playerIsX: !this.state.playerIsX,  // turn-taking\n      stepNum: history.length,\n      winningLine: line,\n    });\n\n    // make AI moves\n    if ( this.state.playMode === GAME_MODE.ai ) {\n      if ( line ) return; // AI has lost\n      const bestMove = AIPlayer.search(squares).move;\n      \n      // clear any existing main board styling\n      const elems = document.querySelectorAll(`.square:not(.preview)`);\n      elems.forEach(s => s.className = 'square');\n\n      if ( bestMove == null ) return;\n      // highlight recommended move\n      const sq = document.querySelector(`#sq-${bestMove}:not(.preview)`);\n      sq.className += ' recommended';\n      // TODO: have the AI make the move\n    }\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNum: step,\n      playerIsX: (step % 2) === 0,\n      winningLine: null,\n    })\n  }\n\n  handleToggle() {\n    this.setState({\n      sortRecent: !this.state.sortRecent\n    });\n  }\n\n  handleRestart() {\n    this.setState({\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNum: 0,\n      playerIsX: !this.state.playerIsX,\n      winningLine: null,\n    });\n  }\n\n  handleChange(event) {\n    this.setState({ playMode: event.target.value });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNum];\n\n    let status;\n    if ( isTerminal(current.squares) ) {\n      const result = checkWinner(current.squares);\n      status = result ? `Winner: ${result.winner}` : 'Draw';\n    } else {\n      status = `Next player: ${this.state.playerIsX ? 'X' : 'O'}`;\n    }\n\n    return (\n      <Splitpane\n        left={\n          <HistorySidebar\n            history={history.slice(0, history.length - 1)}\n            reversed={this.state.sortRecent}\n            onClick={(i) => this.jumpTo(i)} />\n        }\n        right={\n          <main className='main'>\n            <div className='status'>{status}</div>\n            <Board\n              squares={current.squares}\n              winningLine={this.state.winningLine}\n              onClick={(i) => this.handleClick(i)} />\n            <Toggle\n              onClick={() => this.handleToggle()}\n              sortRecent={this.state.sortRecent} />\n            <Restart\n              onClick={() => this.handleRestart()} />\n            <PlayMode \n              value={this.state.playMode}\n              onChange={(e) => this.handleChange(e)} />\n          </main>\n        } />\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './game';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}